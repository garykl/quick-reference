* quick reference

Reference positions in the filesystem by executing =perl6 qr.p6
add=. One can change to a reference by using =`perl6 qr.p6 cd
<reference_name>`=, where =<reference_name>= is =basename `pwd`= by
default. References can be removed by =perl6 qr.py remove= from the
respective directory.

It is possible to use custom reference names by providing an
additional value for =<reference_name>= for =perl6 qr.p6 add
<reference_name>= or =perl6 qr.p6 remove <reference_name>=.

List all saved references with =perl6 qr.p6 list=.

** convenience

   I use two helper mechanisms to make this program really useful.
   First, I create a link in a folder that is registered in =$PATH=,
   e.g. =~/bin/qr= and make it executable which saves a lot of
   keystrokes (=qr add=, =qr remove=, =qr list=, =qr links=, =qr cd=).

   For using the change directory functionality one has to use
   backticks, because you cannot change the directory of the parent
   process from within the perl script. =qr cd= just outputs =cd
   some/path=. Therefore I created a simple zsh Widget:
#+BEGIN_SRC zsh
backtick-line() {
    BUFFER='`'$BUFFER'`';
    zle accept-line;
}
zle -N backtick-line
bindkey '^[`' backtick-line
#+END_SRC
   With this, one can write, for example =qr cd lsls= and then by
   pressing =Alt-`= this will be surrounded by backticks and then
   executed. Very convenient. Please tell me, if you know a better way
   of changing the directory of the parent process.

* interna

For using this script it is necessary to have a folder =~/.qr= in which
a file =~/.qr/.qr= is written, that saves all references and names with
the date of its last usage.

* usefulness for GUIs
While this tool is convenient to be used at the command line, the
references are useless for programs with a graphical user
interface. For that, one can use =perl6 qr.p6 links=. For each reference
saved, a link in =~/.qr= is created.

* how it came

This is a script, that I wrote for learning perl6 basics. Feel free to
criticize my work!
